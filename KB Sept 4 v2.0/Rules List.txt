Rules for AI-Assisted Web Projects

1. Core Philosophy & Environment

The Golden Rule: The project must be fully functional when index.html is opened directly in a browser from the local file system (using the file:/// protocol). Advanced, server-dependent features (like Service Workers for offline caching) should be implemented to degrade gracefully (i.e., not run and not cause errors) in this environment.
No Servers or Build Tools: The solution must not require a local web server (like "Live Server") or any command-line tools for building, compiling, or package management (npm, Vite, etc.).
Client-Side Only: All code must run entirely in the browser. There is no backend.
Robustness First: The application must be resilient. This includes providing fallbacks for potentially failing external resources (like CDNs) and handling potential runtime errors gracefully.

2. Project Structure & Modularity

A highly modular, multi-file structure is mandatory for organization and scalability.
JavaScript Modularity: The application logic must be split into multiple, single-responsibility files. The established pattern is:
Data Files: billers.js, locations.js, kb-articles.js, etc.
Data-Specific Notes: A src/live/ directory for large, biller-specific data files (e.g., BGE.js).
Core Logic: app-core.js (global state, DOM cache), app-features.js (settings, analytics), and feature-specific logic files (location-feature.js, notes-feature.js).
UI Rendering: ui-components.js (UI object definition), ui-notes.js (notes-specific rendering).
Initialization: app-main.js (the final script that starts the app).
CSS Architecture: Stylesheets must be split for maintainability:
theme.css: Contains only CSS custom properties (variables) for colors, fonts, and spacing for both light and dark themes. This file controls the "look and feel."
styles.css: Contains all structural and layout rules for components, animations, and responsive design. This file controls the "shape and behavior."
Feature-Specific CSS: Additional, self-contained stylesheets for complex components (e.g., notes.css) are encouraged.

3. Code & Functionality

Core Technologies: The project must only use HTML, CSS, and vanilla JavaScript (ES6+). No frameworks (React, Vue) or external component libraries (Material UI, Bootstrap) are permitted.
JavaScript Communication & Loading Order:
No ES Modules: The keywords import/export and <script type="module"> are strictly forbidden to ensure file:/// compatibility.
Global Scope: Communication between .js files must be achieved by declaring global constants and objects (e.g., const BILLERS = [...], const UI = {}).
Critical Script Order: The <script> tags in index.html must be ordered meticulously to ensure that data and objects are defined before any script that attempts to use them. The initialization script (app-main.js) must always be last.
Defensive Programming & Error Handling:
Null Checks: Always check if a DOM element exists (is not null) before attempting to access its properties or methods.
Error Boundaries: Wrap critical initialization blocks (like the main init() function) in a try...catch block to prevent a single failure from crashing the entire application and to provide clear error feedback.
UI/UX & Accessibility:
User Feedback: All interactive elements must provide clear visual feedback, such as hover effects, active states, and focus indicators (:focus-visible).
Informative UI: Use tooltips to explain the function of controls and display keyboard shortcuts where applicable.
Accessibility: Use semantic HTML and ARIA attributes where necessary to ensure the application is accessible.

4. AI Collaboration & Workflow

The Planning Rule: For any request involving multiple files or significant feature changes, the AI must first devise a detailed plan.
Plan Requirements: The plan must include:
A clear diagnosis of the problem or an outline of the new feature.
A proposed solution, detailing the implementation strategy.
A complete list of all new and modified files.
Approval is Mandatory: The AI must not generate any code until the user has explicitly reviewed and approved the plan.



Directory:

ultimate-biller-hub/
├── index.html              // Main application entry point
├── sw.js                   // Service Worker for offline functionality
└── src/
    ├── assets/
    │   └── svg/
    │       ├── ach.svg
    │       ├── amex.svg
    │       └── ... (other payment logos)
    ├── css/
    │   ├── notes.css       // Styles specific to the notes component
    │   ├── styles.css      // Core layout, component, and responsive styles
    │   └── theme.css       // CSS variables for light/dark themes
    ├── js/
    │   ├── core/
    │   │   ├── app-core.js   // Global state, DOM cache, core handlers
    │   │   ├── data-helpers.js // Functions for sorting/filtering data
    │   │   ├── db.js         // NEW: Module for IndexedDB logic
    │   │   ├── utils.js      // General utility functions (debounce, etc.)
    │   │   └── virtual-list.js // NEW: Reusable virtual rendering engine
    │   ├── data/
    │   │   ├── billers-a-c.js  // NEW: Sharded biller data
    │   │   ├── billers-d-f.js  // NEW: ...and so on
    │   │   ├── kb-articles.js
    │   │   └── locations.js
    │   ├── features/
    │   │   ├── app-features.js   // Logic for Settings, Analytics, etc.
    │   │   ├── location-feature.js
    │   │   └── notes-feature.js
    │   ├── main/
    │   │   └── app-main.js   // Final script; initializes the application
    │   ├── ui/
    │   │   ├── ui-components.js // Main UI rendering object
    │   │   └── ui-notes.js      // Renders the notes component UI
    │   └── workers/
    │       └── search.worker.js // NEW: Handles search in a background thread
    └── live/
        └── BGE.js            // Biller-specific detailed notes data
